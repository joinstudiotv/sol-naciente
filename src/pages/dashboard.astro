---
import Admin from "../layouts/Admin.astro";
import { supabase } from "../lib/supabase";
import { createClient } from '@vercel/kv';

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
	return Astro.redirect("/signin");
}

let session;
try {
	session = await supabase.auth.setSession({
		refresh_token: refreshToken.value,
		access_token: accessToken.value,
	});
	if (session.error) {
		Astro.cookies.delete("sb-access-token", {
			path: "/",
		});
		Astro.cookies.delete("sb-refresh-token", {
			path: "/",
		});
		return Astro.redirect("/signin");
	}
} catch (error) {
	Astro.cookies.delete("sb-access-token", {
		path: "/",
	});
	Astro.cookies.delete("sb-refresh-token", {
		path: "/",
	});
	return Astro.redirect("/signin");
}

// const { KV_REST_API_URL, KV_REST_API_TOKEN } = import.meta.env;

// const kv = createClient({ url: KV_REST_API_URL, token: KV_REST_API_TOKEN });

// const email = await kv.get('email') as string;
// const phone = await kv.get('phone') as number;

const email = 'pepe@gmail.com'
const phone = '987654321'

const title = "Sol Naciente | Dashboard";
const descr = "Dashboard para editar la información de la página";
---

<Admin {title} {descr}>
<main class="fcol fcc">
	<h1>Bienvenido Denis</h1>
	<p>Este es el administrador de su página web. Aquí podrá cambiar el contenido que muestra en su página.</p>
	<div class="forms">
		<form class="pyc" action="/api/admin/update" method="post" id="pyc-form">
			<h2>Info de contacto</h2>
			<label for="phone">
				<span>Número de teléfono</span>
				<input type="text" name="phone" id="phone" placeholder="910880595" value={phone} required />
			</label>
			<label for="email">
				<span>Correo empresarial</span>
				<input type="email" name="email" id="email" placeholder="info@solnaciente.pe" value={email} required />
			</label>
			<button class="btn btn-brown" type="submit">Guardar</button>
		</form>
		<div class="empleos">
			<h2>Empleos</h2>
		</div>
		<form class="signout" action="/api/auth/signout">
			<button class="btn btn-red" type="submit">Cerrar Sesión</button>
		</form>
	</div>
	<p>Hecho por Join Studio</p>
	<p class="fc message failure hidden">
		<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-triangle-alert"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>
		Error al hacer algo
	</p>
	<p class="fc message success hidden">
		<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check"><path d="M20 6 9 17l-5-5"/></svg>
		Cambio realizado con éxito
	</p>
</main>
<script>
	const pyc_btn = document.querySelector('.pyc button') as HTMLButtonElement;
	const success = document.querySelector('.success') as HTMLElement;
	const failure = document.querySelector('.failure') as HTMLElement;

	// cambio de número & email
	document.getElementById('pyc-form')?.addEventListener('submit', async function (e: Event) {
		e.preventDefault();

		// Mensaje de carga
		pyc_btn.textContent = 'Cargando...'

		// Obtener los datos del formulario
		const email = (document.getElementById('email') as HTMLInputElement).value;
		const phone = (document.getElementById('phone') as HTMLInputElement).value;

		// Limpiar mensajes de error previos

		// confirmar que el teléfono tenga 9 dígitos
		if (phone.length !== 9) {
			failure.classList.remove('hidden');
			setTimeout(() => {
				failure.classList.add('hidden');
			}, 2000);
		} else {
			success.classList.remove('hidden');
			setTimeout(() => {
				success.classList.add('hidden');
			}, 2000);
		}

		pyc_btn.textContent = 'Guardar';
	});
</script>
</script>
</Admin>

<style>
	.success {
		color: green;
		background: #a3ff54;
	}
	.failure {
		color: var(--red);
		background: #ffbbab;
	}
	.message {
		gap: 0.5em;
		padding: 0.5em 1em;
		border-radius: 0.5em;
		position: absolute;
		top: 1em;

		transition: all 0.5s ease-in-out;
	}
	.message.hidden {
		transform: translateY(-4em);
    opacity: 0;
	}
	main {
		padding: 4em 1em;
		min-height: 100dvh;
		gap: 2em;
	}
	h1, h2 {
		margin: 0;
	}
	p {
		max-width: 45ch;
		text-align: center;
	}
	.forms {
		display: grid;
		grid-template-columns: 1fr 2fr;
		gap: 1em;
	}
	.pyc, .empleos, .signout {
		display: flex;
		flex-direction: column;

		background: var(--peach);
		border-radius: 1em;
		padding: 2em 1em;
	}
	.empleos {
		grid-row-start: 1;
    grid-row-end: 3;
    grid-column: 2;
	}
	.pyc {
		gap: 1em;
		max-width: 400px;
	}
	.pyc button {
		align-self: center;
	}
	@media (max-width: 700px) {
		.pyc {
			max-width: 700px;
		}
		.forms {
			grid-template-columns: 1fr;
			align-self: stretch;
		}
		.empleos {
			grid-row-start: unset;
			grid-row-end: unset;
			grid-column: unset;
		}
	}
</style>